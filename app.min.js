document.addEventListener('DOMContentLoaded', () => {
    const e = document.getElementById('main-page'),
        t = document.getElementById('results-page'),
        n = document.getElementById('main-search-form'),
        s = document.getElementById('results-search-form'),
        i = document.getElementById('main-search-input'),
        r = document.getElementById('results-search-input'),
        o = document.getElementById('tabs-container'),
        a = document.getElementById('instant-answer-container'),
        l = document.getElementById('results-container'),
        c = document.getElementById('related-searches'),
        d = document.getElementById('theme-checkbox'),
        u = document.getElementById('menu-button'),
        m = document.getElementById('side-menu'),
        p = document.getElementById('header-logo-home'),
        g = document.getElementById('menu-home-btn'),
        h = document.getElementById('back-to-top'),
        f = document.getElementById('back-to-home'),
        y = document.getElementById('voice-search-btn'),
        v = document.getElementById('date-filter'),
        b = document.getElementById('location-filter'),
        w = document.getElementById('translate-tool'),
        E = document.getElementById('find-in-page');
    let k = {
            currentQuery: '',
            currentPage: 1,
            resultsPerPage: 20
        },
        S = {
            darkMode: !1
        };
    const x = [{
        name: 'Google',
        baseUrl: 'https://www.google.com/search?q=',
        parser: parseGoogle
    }, {
        name: 'Bing',
        baseUrl: 'https://www.bing.com/search?q=',
        parser: parseBing
    }, {
        name: 'YouTube',
        baseUrl: 'https://www.youtube.com/results?search_query=',
        parser: parseVideo
    }, {
        name: 'Twitter',
        baseUrl: 'https://twitter.com/search?q=',
        parser: parseSocial
    }];
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js').then(() => console.log('Service Worker registered')).catch(e => console.error('SW registration failed:', e))
    }

    function P() {
        const e = localStorage.getItem('mistaFySettings');
        e && (S = JSON.parse(e), document.body.classList.toggle('dark-mode', S.darkMode), d.checked = S.darkMode)
    }

    function T() {
        localStorage.setItem('mistaFySettings', JSON.stringify(S))
    }
    d.addEventListener('change', () => {
        S.darkMode = d.checked, T(), P()
    }), n.addEventListener('submit', async e => {
        e.preventDefault(), k.currentQuery = i.value.trim(), k.currentQuery && ($(), [i.value, r.value] = [k.currentQuery, k.currentQuery], a.innerHTML = '', l.innerHTML = '', o.innerHTML = '', c.innerHTML = '', k.currentPage = 1, await M(k.currentQuery) || await F())
    }), s.addEventListener('submit', async e => {
        e.preventDefault(), k.currentQuery = r.value.trim(), k.currentQuery && ($(), [i.value, r.value] = [k.currentQuery, k.currentQuery], a.innerHTML = '', l.innerHTML = '', o.innerHTML = '', c.innerHTML = '', k.currentPage = 1, await M(k.currentQuery) || await F())
    }), p.addEventListener('click', C), g.addEventListener('click', C), u.addEventListener('click', () => m.classList.toggle('open')), i.addEventListener('input', e => {
        clearTimeout(window.autocompleteTimeout), window.autocompleteTimeout = setTimeout(() => L(e.target.value), 300)
    }), document.addEventListener('click', e => {
        m.contains(e.target) || u.contains(e.target) || m.classList.remove('open')
    }), window.onscroll = () => {
        [h, f].forEach(e => e.style.display = document.documentElement.scrollTop > 50 ? 'block' : 'none')
    }, h.onclick = () => window.scrollTo({
        top: 0,
        behavior: 'smooth'
    }), f.onclick = C;
    const q = window.SpeechRecognition || window.webkitSpeechRecognition;
    q ? (y.onclick = () => {
        const e = new q;
        e.lang = 'hi-IN', e.start(), i.placeholder = 'बोलें...', e.onresult = t => {
            i.value = t.results[0][0].transcript, i.form.requestSubmit()
        }, e.onerror = () => i.placeholder = 'सुन नहीं पाया।', e.onend = () => i.placeholder = 'खोजें: मेरा IP, कैलकुलेटर...'
    }: y.style.display = 'none', w.onclick = () => {
        const e = prompt('Enter text to translate (hi to en):');
        e && fetch(`https://api.popcat.xyz/translate?text=${encodeURIComponent(e)}&to=en`).then(e => e.json()).then(e => {
            alert(`Translation: ${e.translated}`)
        }).catch(() => alert('Translation failed.'))
    }, E.onclick = () => {
        const e = prompt('Enter text to find:');
        if (e) {
            const t = new RegExp(e, 'gi'),
                n = document.body.innerHTML.match(t);
            alert(`Found: ${n?n.length:0} occurrences`)
        }
    }, [v, b].forEach(e => {
        e.onchange = () => {
            k.currentQuery += ` ${v.value?`after:${v.value}`:''} ${b.value?`near:${b.value}`:''}`
        }
    }));

    function C() {
        t.style.display = 'none', e.style.display = 'block'
    }

    function $() {
        k.currentQuery += ` ${v.value?`after:${v.value}`:''} ${b.value?`near:${b.value}`:''}`
    }
    async function M(e) {
        const t = e.toLowerCase();
        if (/my ip/i.test(t)) return a.innerHTML = '<div class="widget-card"><h3>आपका IP</h3><p>कृपया ब्राउज़र कंसोल (F12) में देखें (सीधा IP नहीं दिखाया जा सकता)</p></div>', !0;
        if (/calculator/i.test(t)) return a.innerHTML = '<div class="widget-card"><h3>कैलकुलेटर</h3><input type="number" id="calc-num1" placeholder="संख्या 1"><input type="number" id="calc-num2" placeholder="संख्या 2"><select id="calc-op"><option value="+">+</option><option value="-">-</option><option value="*">×</option><option value="/">÷</option></select><button onclick="calculate()">हिसाब करें</button><p id="calc-result"></p></div>', !0;
        if (/(\d+)\s*([\+\-\*\/])\s*(\d+)/i.test(t)) {
            const [e, n, s] = t.match(/(\d+)\s*([\+\-\*\/])\s*(\d+)/).slice(1), i = parseInt(e), r = parseInt(s);
            return a.innerHTML = `<div class="widget-card"><h3>कैलकुलेटर</h3><p>${i} ${n} ${r} = ${eval(`${i}${n}${r}`)}</p></div>`, !0
        }
        if (/(weather|mausam)\s(in|mein)\s(.+)/i.test(t)) {
            const n = t.match(/(weather|mausam)\s(in|mein)\s(.+)/)[3];
            return a.innerHTML = `<div class="widget-card"><h3>${n} का मौसम</h3><p>मुफ्त मौसम डेटा के लिए स्थानीय जानकारी नहीं (ऑफलाइन अनुमान: 25°C, साफ़)</p></div>`, !0
        }
        if (/(\d+)\s(\w+)\sto\s(\w+)/i.test(t)) {
            const [e, n, s] = t.match(/(\d+)\s(\w+)\sto\s(\w+)/).slice(1);
            return a.innerHTML = `<div class="widget-card"><h3>मुद्रा रूपांतरण</h3><p>${e} ${n} ≈ ${e} ${s} (मुफ्त डेटा के बिना सटीक नहीं)</p></div>`, !0
        }
        if (/(cricket score|match result)\s(.+)/i.test(t)) {
            const n = t.match(/(cricket score|match result)\s(.+)/)[2];
            return a.innerHTML = `<div class="widget-card"><h3>${n} का स्कोर</h3><p>मुफ्त डेटा के बिना अपडेट नहीं (ऑफलाइन: कोई डेटा नहीं)</p></div>`, !0
        }
        return !1
    }
    async function F() {
        l.innerHTML = '<div class="loader">खोज रहे हैं...</div>';
        try {
            const e = x.map(e => D(e, k.currentQuery)),
                t = await Promise.allSettled(e),
                n = t.flatMap(e => 'fulfilled' === e.status ? e.value : []),
                s = Array.from(new Map(n.map(e => [e.link, e])).values()).slice(0, 50),
                i = s.reduce((e, t) => (e[t.category || 'web'].push(t), e), {
                    web: [],
                    images: [],
                    videos: [],
                    social: []
                });
            if (i.web.length) {
                o.innerHTML = Object.keys(i).map(e => `<button class="tab-button ${'web'===e?'active':''}" data-tab="${e}">${'web'===e?'सभी':'images'===e?'चित्र':'videos'===e?'वीडियो':'social'===e?'सोशल मीडिया':e}</button>`).join(''), l.innerHTML = i.web.slice(0, k.currentPage * k.resultsPerPage).map(e => `<div class="result-item">${e.thumbnail?`<img src="${e.thumbnail}" loading="lazy" alt="${e.title}">`:''}<a href="${e.link}" target="_blank">${e.title}</a><p>${e.snippet}</p><small>स्रोत: ${e.source}</small></div>`).join(''), await L(k.currentQuery, !0)
            } else l.innerHTML = '<div class="result-item">कोई परिणाम नहीं।</div>'
        } catch (e) {
            l.innerHTML = '<div class="result-item">खोज में त्रुटि।</div>', console.error('Fetch Error:', e)
        }
    }
    async function D(e, t) {
        const n = `${e.baseUrl}${encodeURIComponent(t)}`;
        try {
            const s = await fetchViaProxy(n);
            return e.parser(s)
        } catch (e) {
            return console.error('Proxy Error:', e), []
        }
    }
    async function L(e, t = !1) {
        if (e.length < 2) return t ? c.innerHTML = '' : void 0;
        try {
            const n = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent('https://suggestqueries.google.com/complete/search?client=firefox&q='+encodeURIComponent(e))}`),
                s = await n.json(),
                i = JSON.parse(s.contents)[1];
            t ? c.innerHTML = i.map(e => `<div class="suggestion-item" onclick="selectSuggestion('${e}')">${e}</div>`).join('') : c.innerHTML = ''
        } catch (e) {
            console.error('Autocomplete Error:', e), t ? c.innerHTML = '' : void 0
        }
    }

    function N(e) {
        return e.querySelector('a') && e.querySelector('h3') ? {
            title: e.querySelector('h3').textContent,
            link: e.querySelector('a').href,
            snippet: e.querySelector('span,p')?.textContent || '',
            thumbnail: e.querySelector('img')?.src || '',
            source: e.querySelector('a').hostname,
            category: 'web'
        } : null
    }

    function O(e) {
        return e.querySelector('a') && e.querySelector('h2') ? {
            title: e.querySelector('h2').textContent,
            link: e.querySelector('a').href,
            snippet: e.querySelector('p')?.textContent || '',
            thumbnail: e.querySelector('img')?.src || '',
            source: e.querySelector('a').hostname,
            category: 'web'
        } : null
    }

    function A(e) {
        return e.querySelector('div#result-stats') ? {
            title: 'Video Results',
            link: e.querySelector('a').href,
            snippet: e.querySelector('div#result-stats')?.textContent || '',
            thumbnail: e.querySelector('img')?.src || '',
            source: e.querySelector('a').hostname,
            category: 'videos'
        } : null
    }

    function j(e) {
        return e.querySelector('article') ? {
            title: e.querySelector('article h2').textContent,
            link: e.querySelector('article a').href,
            snippet: e.querySelector('article p')?.textContent || '',
            thumbnail: e.querySelector('article img')?.src || '',
            source: e.querySelector('article a').hostname,
            category: 'social'
        } : null
    }
    async function fetchViaProxy(e) {
        try {
            const t = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(e)}`),
                n = await t.json();
            return new DOMParser().parseFromString(n.contents, 'text/html')
        } catch (e) {
            return console.error('Proxy Error:', e), null
        }
    }
    window.selectSuggestion = e => {
        i.value = e, r.value = e, n.requestSubmit()
    }, window.calculate = () => {
        const e = document.getElementById('calc-num1').value,
            t = document.getElementById('calc-num2').value,
            n = document.getElementById('calc-op').value,
            s = document.getElementById('calc-result');
        s.textContent = Number(e) + Number(t) * (n === '+' ? 1 : n === '-' ? -1 : n === '*' ? t : n === '/' ? 1 / t : 0)
    }, P(), window.onscroll = () => {
        document.documentElement.scrollTop + window.innerHeight >= document.documentElement.scrollHeight - 100 && k.currentPage * i.web.length < 100 && F()
    }
}), self.addEventListener('fetch', e => {
    e.respondWith(caches.match(e.request).then(t => t || fetch(e.request)))
});
