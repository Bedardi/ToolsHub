document.addEventListener('DOMContentLoaded', () => {
    const mainPage = document.getElementById('main-page');
    const resultsPage = document.getElementById('results-page');
    const mainSearchForm = document.getElementById('main-search-form');
    const resultsSearchForm = document.getElementById('results-search-form');
    const mainSearchInput = document.getElementById('main-search-input');
    const resultsSearchInput = document.getElementById('results-search-input');
    const tabsContainer = document.getElementById('tabs-container');
    const instantAnswerContainer = document.getElementById('instant-answer-container');
    const resultsContainer = document.getElementById('results-container');
    const suggestionsBox = document.getElementById('autocomplete-suggestions');
    const resultsSuggestions = document.getElementById('results-suggestions');
    const themeToggle = document.getElementById('theme-checkbox');
    const menuButton = document.getElementById('menu-button');
    const sideMenu = document.getElementById('side-menu');
    const headerLogo = document.getElementById('header-logo-home');
    const menuHomeBtn = document.getElementById('menu-home-btn');
    const backToTopBtn = document.getElementById('back-to-top');
    const backToHomeBtn = document.getElementById('back-to-home');
    const voiceSearchBtn = document.getElementById('voice-search-btn');
    const resultsVoiceBtn = document.getElementById('results-voice-btn');
    const loadMore = document.getElementById('load-more');

    let state = { currentQuery: '', currentPage: 1, resultsPerPage: 10 };
    let settings = { darkMode: false };
    let suggestionDebounce;
    let allResults = [];

    const ENGINES = [
        { name: 'Google', baseUrl: 'https://www.google.com/search?q=', parser: parseGoogle },
        { name: 'Bing', baseUrl: 'https://www.bing.com/search?q=', parser: parseBing }
    ];

    function loadSettings() {
        const saved = localStorage.getItem('mistaFySettings');
        if (saved) {
            settings = JSON.parse(saved);
            document.body.classList.toggle('dark-mode', settings.darkMode);
            themeToggle.checked = settings.darkMode;
        }
    }

    function saveSettings() {
        localStorage.setItem('mistaFySettings', JSON.stringify(settings));
    }

    // API Handler
    if (window.location.pathname === '/api') {
        const params = new URLSearchParams(window.location.search);
        const q = params.get('q');
        if (q) {
            state.currentQuery = q;
            fetchAndRenderFullResults(true).then(results => {
                document.body.innerHTML = JSON.stringify({ query: q, results, timestamp: new Date().toISOString() });
            });
        }
        return;
    }

    async function handleSearch(event) {
        if (event) event.preventDefault();
        const input = mainPage.style.display !== 'none' ? mainSearchInput : resultsSearchInput;
        state.currentQuery = input.value.trim();
        if (!state.currentQuery) return;

        showResultsPage();
        [mainSearchInput.value, resultsSearchInput.value] = [state.currentQuery, state.currentQuery];

        instantAnswerContainer.innerHTML = '';
        resultsContainer.innerHTML = '';
        tabsContainer.innerHTML = '';
        resultsSuggestions.innerHTML = '';
        loadMore.innerHTML = '';
        state.currentPage = 1;

        const isInstant = await handleInstantAnswers(state.currentQuery);
        if (!isInstant) {
            await fetchAndRenderFullResults();
            await fetchAutocomplete(state.currentQuery, true);
        }
    }

    async function handleInstantAnswers(query) {
        const q = query.toLowerCase();
        if (/^\d+\s*\*\s*\d+$/.test(q)) {
            const [a, b] = q.split('*').map(Number);
            renderInstantAnswer('कैलकुलेटर', `<h2>${a * b}</h2>`);
            return true;
        }
        if (/(weather|mausam)\s(in|mein)\s(.+)/.test(q)) {
            const city = q.match(/(weather|mausam)\s(in|mein)\s(.+)/)[3];
            renderInstantAnswer('मौसम', `<p>${city} का मौसम: 30°C (अनुमानित)</p>`); // Dummy data
            return true;
        }
        if (/(\d+)\s(\w+)\sto\s(\w+)/.test(q)) {
            const [, amount, from, to] = q.match(/(\d+)\s(\w+)\sto\s(\w+)/);
            renderInstantAnswer('मुद्रा', `<h2>${amount} ${from} = ${amount * 83} ${to} (अनुमानित)</h2>`); // Dummy rate
            return true;
        }
        return false;
    }

    function renderInstantAnswer(title, content) {
        instantAnswerContainer.innerHTML = `<div class="widget-card">${content}</div>`;
    }

    async function fetchAndRenderFullResults(forJson = false) {
        resultsContainer.innerHTML = '<div class="loader">खोज रहे हैं...</div>';
        const fetchPromises = ENGINES.map(engine => fetchAndParse(engine, state.currentQuery));
        const results = (await Promise.allSettled(fetchPromises)).flatMap(res => res.status === 'fulfilled' ? res.value : []);
        allResults = results;
        if (allResults.length === 0) {
            resultsContainer.innerHTML = '<div class="result-item">कोई परिणाम नहीं।</div>';
            return [];
        }
        categorizeAndBuildTabs(allResults);
        return forJson ? allResults : [];
    }

    function categorizeAndBuildTabs(results) {
        const tabs = { all: [], images: [] };
        results.forEach(item => tabs[item.category || 'all'].push(item));
        let tabsHtml = '<button class="tab-button active" data-tab="all">सभी</button>';
        if (tabs.images.length) tabsHtml += '<button class="tab-button" data-tab="images">चित्र</button>';
        tabsContainer.innerHTML = tabsHtml;
        renderResults(tabs.all, 'all');
    }

    function handleTabClick(e) {
        if (e.target.classList.contains('tab-button')) {
            tabsContainer.querySelector('.active').classList.remove('active');
            e.target.classList.add('active');
            const tab = e.target.dataset.tab;
            renderResults(categorizedResults[tab] || allResults, tab);
        }
    }

    function renderResults(results, type) {
        resultsContainer.innerHTML = results.slice(0, state.resultsPerPage).map(item => `
            <div class="result-item">
                <h3><a href="${item.link}" target="_blank">${item.title}</a></h3>
                <p>${item.snippet}</p>
            </div>
        `).join('');
        if (results.length > state.resultsPerPage) {
            loadMore.innerHTML = '<button class="load-more-btn" onclick="loadMore()">और लोड करें</button>';
        }
    }

    window.loadMore = () => {
        const start = state.currentPage * state.resultsPerPage;
        const end = start + state.resultsPerPage;
        const more = allResults.slice(start, end);
        if (more.length) {
            resultsContainer.innerHTML += more.map(item => `
                <div class="result-item">
                    <h3><a href="${item.link}" target="_blank">${item.title}</a></h3>
                    <p>${item.snippet}</p>
                </div>
            `).join('');
            state.currentPage++;
        } else {
            loadMore.innerHTML = '';
        }
    };

    async function fetchAndParse(engine, query) {
        const url = `${engine.baseUrl}${encodeURIComponent(query)}`;
        const doc = await fetchViaProxy(url);
        return engine.parser(doc);
    }

    async function fetchViaProxy(url) {
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
        const data = await response.json();
        return new DOMParser().parseFromString(data.contents, 'text/html');
    }

    function parseGoogle(doc) {
        return Array.from(doc.querySelectorAll('div.g')).map(el => {
            const link = el.querySelector('a');
            const title = el.querySelector('h3');
            if (!link || !title) return null;
            return {
                title: title.textContent,
                link: link.href,
                snippet: el.querySelector('span')?.textContent || ''
            };
        }).filter(Boolean);
    }

    function parseBing(doc) {
        return Array.from(doc.querySelectorAll('li.b_algo')).map(el => {
            const link = el.querySelector('a');
            const title = el.querySelector('h2');
            if (!link || !title) return null;
            return {
                title: title.textContent,
                link: link.href,
                snippet: el.querySelector('p')?.textContent || ''
            };
        }).filter(Boolean);
    }

    async function fetchAutocomplete(query, forResults = false) {
        if (query.length < 2) {
            suggestionsBox.style.display = 'none';
            return;
        }
        const url = `https://suggestqueries.google.com/complete/search?client=firefox&q=${encodeURIComponent(query)}`;
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
        const data = await response.json();
        const suggestions = JSON.parse(data.contents)[1];
        const html = suggestions.map(s => `<div class="suggestion-item" onclick="selectSuggestion('${s}')">${s}</div>`).join('');
        if (forResults) resultsSuggestions.innerHTML = html;
        else {
            suggestionsBox.innerHTML = html;
            suggestionsBox.style.display = 'block';
        }
    }

    window.selectSuggestion = (sugg) => {
        mainSearchInput.value = sugg;
        resultsSearchInput.value = sugg;
        handleSearch();
    };

    function showResultsPage() {
        mainPage.style.display = 'none';
        resultsPage.style.display = 'block';
    }

    function showMainPage() {
        resultsPage.style.display = 'none';
        mainPage.style.display = 'flex';
    }

    mainSearchForm.addEventListener('submit', handleSearch);
    resultsSearchForm.addEventListener('submit', handleSearch);
    themeToggle.addEventListener('change', () => {
        settings.darkMode = themeToggle.checked;
        saveSettings();
        loadSettings();
    });
    tabsContainer.addEventListener('click', handleTabClick);
    headerLogo.addEventListener('click', showMainPage);
    menuHomeBtn.addEventListener('click', showMainPage);
    menuButton.addEventListener('click', () => sideMenu.classList.toggle('open'));
    mainSearchInput.addEventListener('input', e => {
        clearTimeout(suggestionDebounce);
        suggestionDebounce = setTimeout(() => fetchAutocomplete(e.target.value), 300);
    });
    document.addEventListener('click', e => {
        if (!sideMenu.contains(e.target) && !menuButton.contains(e.target)) sideMenu.classList.remove('open');
        if (!mainSearchInput.contains(e.target)) suggestionsBox.style.display = 'none';
    });
    window.onscroll = () => backToTopBtn.style.display = (document.documentElement.scrollTop > 100) ? 'block' : 'none';
    backToTopBtn.onclick = () => window.scrollTo({ top: 0, behavior: 'smooth' });
    backToHomeBtn.onclick = showMainPage;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.lang = 'hi-IN';
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => btn.onclick = () => {
            const input = btn.id === 'voice-search-btn' ? mainSearchInput : resultsSearchInput;
            recognition.start();
            input.placeholder = "बोलें...";
            recognition.onresult = e => {
                input.value = e.results[0][0].transcript;
                input.form.requestSubmit();
            };
            recognition.onerror = () => input.placeholder = "सुन नहीं पाया।";
        });
    } else {
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => btn.style.display = 'none');
    }

    loadSettings();
});

// Simple SW (sw.js)
self.addEventListener('fetch', event => {
    event.respondWith(caches.match(event.request).then(response => response || fetch(event.request)));
});
