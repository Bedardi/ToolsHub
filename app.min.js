document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Elements ---
    const mainPage = document.getElementById('main-page');
    const resultsPage = document.getElementById('results-page');
    const mainSearchForm = document.getElementById('main-search-form');
    const resultsSearchForm = document.getElementById('results-search-form');
    const mainSearchInput = document.getElementById('main-search-input');
    const resultsSearchInput = document.getElementById('results-search-input');
    const tabsContainer = document.getElementById('tabs-container');
    const instantAnswerContainer = document.getElementById('instant-answer-container');
    const resultsContainer = document.getElementById('results-container');
    const suggestionsBox = document.getElementById('autocomplete-suggestions');
    const resultsSuggestions = document.getElementById('results-suggestions');
    const themeToggle = document.getElementById('theme-checkbox');
    const sourceToggle = document.getElementById('source-toggle-checkbox');
    const menuButton = document.getElementById('menu-button');
    const sideMenu = document.getElementById('side-menu');
    const headerLogo = document.getElementById('header-logo-home');
    const menuHomeBtn = document.getElementById('menu-home-btn');
    const backToTopBtn = document.getElementById('back-to-top');
    const backToHomeBtn = document.getElementById('back-to-home');
    const voiceSearchBtn = document.getElementById('voice-search-btn');
    const resultsVoiceBtn = document.getElementById('results-voice-btn');
    const loadMore = document.getElementById('load-more');

    // --- State, Settings & Cache ---
    let state = {
        currentQuery: '',
        currentSource: '',
        currentPage: 1,
        resultsPerPage: 20
    };
    let categorizedResults = {};
    let settings = {
        darkMode: false,
        showSource: false
    };
    let suggestionDebounce;
    let allResults = [];
    let suggestions = [];

    // --- Configuration ---
    const PROXY_URL = 'https://api.allorigins.win/get?url=';
    const ENGINES = [{
            name: 'Google',
            baseUrl: 'https://www.google.com/search?q=',
            parser: parseGoogle
        },
        {
            name: 'Bing',
            baseUrl: 'https://www.bing.com/search?q=',
            parser: parseBing
        },
        {
            name: 'DuckDuckGo',
            baseUrl: 'https://html.duckduckgo.com/html/?q=',
            parser: parseDuckDuckGo
        },
        {
            name: 'Brave',
            baseUrl: 'https://search.brave.com/search?q=',
            parser: parseBrave
        }
    ];

    // --- Load Settings ---
    function loadSettings() {
        const saved = localStorage.getItem('mistaFySettings');
        if (saved) {
            settings = JSON.parse(saved);
            document.body.classList.toggle('dark-mode', settings.darkMode);
            themeToggle.checked = settings.darkMode;
            sourceToggle.checked = settings.showSource;
        }
    }

    // --- Save Settings ---
    function saveSettings() {
        localStorage.setItem('mistaFySettings', JSON.stringify(settings));
    }

    // --- Handle URL Parameters for API-like usage ---
    const urlParams = new URLSearchParams(window.location.search);
    const queryFromUrl = urlParams.get('q');
    const format = urlParams.get('format');
    if (queryFromUrl) {
        state.currentQuery = queryFromUrl;
        if (format === 'json') {
            handleSearchForJson();
        } else {
            mainSearchInput.value = state.currentQuery;
            resultsSearchInput.value = state.currentQuery;
            handleSearch();
        }
    }

    async function handleSearchForJson() {
        const isInstant = await handleInstantAnswers(state.currentQuery);
        if (isInstant) {
            document.body.innerHTML = JSON.stringify({
                type: 'instant',
                results: instantAnswerContainer.innerHTML
            });
            return;
        }
        const results = await fetchAndRenderFullResults(true);
        document.body.innerHTML = JSON.stringify({
            type: 'search',
            results
        });
    }

    // --- Main Search Handler ---
    async function handleSearch(event) {
        if (event) event.preventDefault();
        const input = (mainPage.style.display !== 'none') ? mainSearchInput : resultsSearchInput;
        state.currentQuery = input.value.trim();
        if (!state.currentQuery) return;

        showResultsPage();
        [mainSearchInput.value, resultsSearchInput.value] = [state.currentQuery, state.currentQuery];

        instantAnswerContainer.innerHTML = '';
        resultsContainer.innerHTML = '';
        tabsContainer.innerHTML = '';
        resultsSuggestions.innerHTML = '';
        loadMore.innerHTML = '';
        state.currentPage = 1;

        const isInstantAnswer = await handleInstantAnswers(state.currentQuery);
        if (!isInstantAnswer) {
            await fetchAndRenderFullResults();
            await fetchAutocomplete(state.currentQuery, true);
        }
    }

    // --- Instant Answer Logic ---
    async function handleInstantAnswers(query) {
        const q = query.toLowerCase();

        try { // Calculator
            if (/^[\d\s()+\-*/.^%sqrtlogsin costanpi e!]+$/.test(q) && q.length > 2 && q.match(/[+\-*/]/)) {
                const result = eval(q.replace(/sqrt/g, 'Math.sqrt').replace(/log/g, 'Math.log').replace(/sin/g, 'Math.sin').replace(/cos/g, 'Math.cos').replace(/tan/g, 'Math.tan').replace(/pi/g, 'Math.PI').replace(/e/g, 'Math.E'));
                if (typeof result === 'number' && isFinite(result)) {
                    renderInstantAnswer('कैलकुलेटर', `<h2>${result}</h2>`);
                    return true;
                }
            }
        } catch (e) {}

        if (/(what is the|current|aaj)\s(time|samay|date|tarikh)/.test(q)) { // Time/Date
            const now = new Date();
            renderInstantAnswer('समय और दिनांक', `<h2>${now.toLocaleTimeString('hi-IN')}</h2><p>${now.toLocaleDateString('hi-IN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>`);
            return true;
        }

        const cryptoMatch = q.match(/(\w+)\s(price|rate)/);
        if (cryptoMatch) {
            await fetchAndRenderCrypto(cryptoMatch[1]);
            return true;
        }

        const wikiMatch = q.match(/^(what is|who is|kya hai)\s(.+)/);
        if (wikiMatch) {
            return await fetchAndRenderWikipedia(wikiMatch[2]);
        }

        const weatherMatch = q.match(/(weather|mausam)\s(in|mein)\s(.+)/);
        if (weatherMatch) {
            return await fetchAndRenderWeather(weatherMatch[3]);
        }

        const currencyMatch = q.match(/(\d+)\s(\w+)\sto\s(\w+)/);
        if (currencyMatch) {
            return await fetchAndRenderCurrency(currencyMatch[1], currencyMatch[2], currencyMatch[3]);
        }

        const translateMatch = q.match(/translate\s(.+)\sto\s(.+)/);
        if (translateMatch) {
            return await fetchAndRenderTranslation(translateMatch[1], translateMatch[2]);
        }

        return false;
    }

    // --- Instant Answer Fetchers ---
    async function fetchAndRenderCrypto(coin) {
        try {
            const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${coin}&vs_currencies=inr,usd`);
            const data = await response.json();
            const price = data[coin];
            if (!price) throw new Error('Coin not found');
            renderInstantAnswer(`${coin.charAt(0).toUpperCase() + coin.slice(1)} Price`, `<div class="crypto-price">₹ ${price.inr.toLocaleString('en-IN')}</div><p>$ ${price.usd.toLocaleString('en-US')}</p>`);
        } catch {
            renderInstantAnswer('Crypto Price', `<p>क्षमा करें, '${coin}' की कीमत नहीं मिल सकी।</p>`);
        }
    }

    async function fetchAndRenderWikipedia(topic) {
        try {
            const url = `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(topic.replace(/\s/g, '_'))}`;
            const response = await fetch(url);
            if (!response.ok) throw new Error("Not found");
            const data = await response.json();
            renderInstantAnswer(data.title, `<p>${data.extract}</p><div class="wiki-source"><a href="${data.content_urls.desktop.page}" target="_blank">स्रोत: विकिपीडिया</a></div>`);
            return true;
        } catch {
            return false;
        }
    }

    async function fetchAndRenderWeather(city) {
        try {
            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=your_openweather_api_key&units=metric&lang=hi`);
            const data = await response.json();
            if (data.cod !== 200) throw new Error('City not found');
            renderInstantAnswer(`${city} का मौसम`, `<h2>${data.main.temp}°C</h2><p>${data.weather[0].description}</p>`);
            return true;
        } catch {
            renderInstantAnswer('मौसम', `<p>क्षमा करें, '${city}' का मौसम नहीं मिल सका।</p>`);
            return true;
        }
    }

    async function fetchAndRenderCurrency(amount, from, to) {
        try {
            const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${from}`);
            const data = await response.json();
            const rate = data.rates[to];
            if (!rate) throw new Error('Currency not found');
            const result = (amount * rate).toFixed(2);
            renderInstantAnswer('मुद्रा कन्वर्टर', `<h2>${amount} ${from} = ${result} ${to}</h2>`);
            return true;
        } catch {
            renderInstantAnswer('मुद्रा कन्वर्टर', `<p>क्षमा करें, मुद्रा रूपांतरण नहीं हो सका।</p>`);
            return true;
        }
    }

    async function fetchAndRenderTranslation(text, lang) {
        try {
            const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${lang}&dt=t&q=${encodeURIComponent(text)}`;
            const response = await fetch(`${PROXY_URL}${encodeURIComponent(url)}`);
            const data = await response.json();
            const translated = JSON.parse(data.contents)[0][0][0];
            renderInstantAnswer('अनुवाद', `<h2>${translated}</h2><p>मूल: ${text}</p>`);
            return true;
        } catch {
            renderInstantAnswer('अनुवाद', `<p>क्षमा करें, अनुवाद नहीं हो सका।</p>`);
            return true;
        }
    }

    // --- Fetch and Render Full Results ---
    async function fetchAndRenderFullResults(forJson = false) {
        resultsContainer.innerHTML = '<div class="loader">कई इंजनों से परिणाम खोजे जा रहे हैं...</div>';

        const fetchPromises = ENGINES.map(engine => fetchAndParse(engine, state.currentQuery));
        const resultsFromAllEngines = await Promise.allSettled(fetchPromises);

        allResults = [];
        resultsFromAllEngines.forEach((res, index) => {
            if (res.status === 'fulfilled' && res.value) {
                allResults.push(...res.value);
            } else {
                console.error(`Failed to fetch from ${ENGINES[index].name}`, res.reason);
            }
        });

        if (allResults.length === 0) {
            resultsContainer.innerHTML = `<div class="result-item"><p>इस खोज के लिए कोई परिणाम नहीं मिला।</p></div>`;
            return [];
        }

        const uniqueResults = deduplicateResults(allResults);
        const imageResults = await fetchAndParse({
            name: 'GoogleImages',
            baseUrl: 'https://www.google.com/search?tbm=isch&q=',
            parser: parseGoogleImages
        }, state.currentQuery);

        if (forJson) return [...uniqueResults, ...imageResults];
        categorizeAndBuildTabs([...uniqueResults, ...imageResults]);
        return [...uniqueResults, ...imageResults];
    }

    function deduplicateResults(results) {
        const unique = new Map();
        results.forEach(item => {
            const normalizedLink = item.link.replace(/^(https?:\/\/)?(www\.)?/, '').replace(/\/$/, '');
            if (!unique.has(normalizedLink)) {
                unique.set(normalizedLink, item);
            }
        });
        return Array.from(unique.values());
    }

    function categorizeAndBuildTabs(results) {
        categorizedResults = {
            all: [],
            images: [],
            videos: [],
            news: []
        };
        const newsDomains = ['bbc.com', 'reuters.com', 'indiatoday.in', 'thehindu.com', 'ndtv.com'];
        results.forEach(item => {
            if (item.category === 'images') {
                categorizedResults.images.push(item);
            } else {
                categorizedResults.all.push(item);
                if (item.link.includes('youtube.com')) categorizedResults.videos.push(item);
                if (newsDomains.some(domain => item.link.includes(domain))) categorizedResults.news.push(item);
            }
        });

        let tabsHtml = `<button class="tab-button active" data-tab="all">All (${categorizedResults.all.length})</button>`;
        if (categorizedResults.images.length) tabsHtml += `<button class="tab-button" data-tab="images">Images (${categorizedResults.images.length})</button>`;
        if (categorizedResults.videos.length) tabsHtml += `<button class="tab-button" data-tab="videos">Videos (${categorizedResults.videos.length})</button>`;
        if (categorizedResults.news.length) tabsHtml += `<button class="tab-button" data-tab="news">News (${categorizedResults.news.length})</button>`;
        tabsContainer.innerHTML = tabsHtml;

        renderResults(categorizedResults.all, 'web');
    }

    function handleTabClick(e) {
        if (!e.target.matches('.tab-button')) return;
        tabsContainer.querySelector('.active').classList.remove('active');
        e.target.classList.add('active');
        const tab = e.target.dataset.tab;
        state.currentPage = 1;
        renderResults(categorizedResults[tab], tab);
    }

    // --- Rendering Logic ---
    function renderInstantAnswer(title, content) {
        instantAnswerContainer.innerHTML = `<div class="widget-card"><h2>${title}</h2>${content}</div>`;
    }

    function renderResults(results, type) {
        resultsContainer.innerHTML = '';
        if (!results || results.length === 0) {
            resultsContainer.innerHTML = `<div class="result-item"><p>इस श्रेणी में कोई परिणाम नहीं है।</p></div>`;
            return;
        }
        const start = 0;
        const end = state.resultsPerPage;
        const initialResults = results.slice(start, end);
        let html = '';
        if (type === 'images') {
            html = '<div id="image-results-grid">' + initialResults.map(item => `<a href="${item.link}" target="_blank" rel="noopener noreferrer" class="image-item"><img src="${item.img}" alt="${item.title}" loading="lazy"></a>`).join('') + '</div>';
        } else {
            html = initialResults.map(item => createResultItemHtml(item)).join('');
        }
        resultsContainer.innerHTML = html;
        state.currentPage = 1;
        if (results.length > end) {
            loadMore.innerHTML = '<button class="load-more-btn" onclick="loadMoreResults()">और लोड करें</button>';
        }
        window.addEventListener('scroll', infiniteScroll);
    }

    function createResultItemHtml(item) {
        let thumbnail = item.thumbnail ? `<img src="${item.thumbnail}" class="result-thumbnail" alt="Thumbnail" loading="lazy">` : '';
        let media = '';
        if (item.img) media += `<img src="${item.img}" alt="Image" loading="lazy">`;
        if (item.video) media += `<video src="${item.video}" controls></video>`;
        let date = item.date ? `<span class="date">${item.date}</span>` : '';
        return `<div class="result-item">${thumbnail}<div class="result-content"><h3><a href="${item.link}" target="_blank" rel="noopener noreferrer">${item.title}</a></h3><cite><img src="${item.favicon}" class="favicon" onerror="this.style.display='none'">${item.cite}${date}</cite><p>${item.snippet}</p><div class="result-media">${media}</div>${settings.showSource && item.source ? `<div class="result-source-info">Source: ${item.source}</div>` : ''}</div></div>`;
    }

    // --- Infinite Scroll and Load More ---
    function infiniteScroll() {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
            loadMoreResults();
        }
    }

    window.loadMoreResults = function() {
        const activeTab = tabsContainer.querySelector('.active').dataset.tab;
        const results = categorizedResults[activeTab];
        const start = state.currentPage * state.resultsPerPage;
        const end = start + state.resultsPerPage;
        const moreResults = results.slice(start, end);
        if (moreResults.length > 0) {
            let html = moreResults.map(item => createResultItemHtml(item)).join('');
            resultsContainer.innerHTML += html;
            state.currentPage++;
        } else {
            loadMore.innerHTML = '';
            window.removeEventListener('scroll', infiniteScroll);
        }
    }

    // --- Data Fetching & Parsing ---
    async function fetchAndParse(engine, query) {
        try {
            const url = `${engine.baseUrl}${encodeURIComponent(query)}`;
            const doc = await fetchViaProxy(url);
            return engine.parser(doc).map(item => ({
                ...item,
                source: engine.name
            }));
        } catch (error) {
            console.error(`Error in fetchAndParse for ${engine.name}:`, error);
            return [];
        }
    }

    async function fetchViaProxy(url) {
        const response = await fetch(`${PROXY_URL}${encodeURIComponent(url)}`);
        if (!response.ok) throw new Error(`Proxy error for ${url}`);
        const data = await response.json();
        return new DOMParser().parseFromString(data.contents, 'text/html');
    }

    // --- Custom Parsers ---
    function parseGoogle(doc) {
        return Array.from(doc.querySelectorAll('div.g')).map(el => {
            const linkEl = el.querySelector('a'),
                titleEl = el.querySelector('h3');
            if (!linkEl || !titleEl || !linkEl.href.startsWith('http')) return null;
            const domain = new URL(linkEl.href).hostname;
            const thumbnail = el.querySelector('img')?.src || '';
            const date = el.querySelector('span[role="text"]')?.innerText.match(/\d{1,2} \w{3} \d{4}/)?.[0] || '';
            return {
                title: titleEl.innerText,
                link: linkEl.href,
                snippet: el.querySelector('div[style*="-webkit-line-clamp"]')?.innerText || el.querySelector('span')?.innerText || '',
                cite: domain,
                favicon: `https://www.google.com/s2/favicons?sz=64&domain_url=${domain}`,
                thumbnail,
                date
            };
        }).filter(Boolean);
    }

    function parseBing(doc) {
        return Array.from(doc.querySelectorAll('li.b_algo')).map(el => {
            const linkEl = el.querySelector('a'),
                titleEl = el.querySelector('h2');
            if (!linkEl || !titleEl || !linkEl.href) return null;
            const thumbnail = el.querySelector('img')?.src || '';
            const date = el.querySelector('.news_dt')?.innerText || '';
            return {
                title: titleEl.innerText,
                link: linkEl.href,
                snippet: el.querySelector('.b_caption p')?.innerText || '',
                cite: new URL(linkEl.href).hostname,
                favicon: `https://www.google.com/s2/favicons?sz=64&domain_url=${new URL(linkEl.href).hostname}`,
                thumbnail,
                date
            };
        }).filter(Boolean);
    }

    function parseDuckDuckGo(doc) {
        return Array.from(doc.querySelectorAll('div.result')).map(el => {
            const linkEl = el.querySelector('a.result__a');
            if (!linkEl || !linkEl.href) return null;
            const thumbnail = el.querySelector('img')?.src || '';
            const date = '';
            return {
                title: linkEl.innerText,
                link: linkEl.href,
                snippet: el.querySelector('.result__snippet')?.innerText || '',
                cite: el.querySelector('.result__url').innerText.trim(),
                favicon: `https://www.google.com/s2/favicons?sz=64&domain_url=${new URL(linkEl.href).hostname}`,
                thumbnail,
                date
            };
        }).filter(Boolean);
    }

    function parseBrave(doc) {
        return Array.from(doc.querySelectorAll('.snippet')).map(el => {
            const linkEl = el.querySelector('a'),
                titleEl = el.querySelector('h3');
            if (!linkEl || !titleEl) return null;
            const thumbnail = el.querySelector('img')?.src || '';
            const date = el.querySelector('.date')?.innerText || '';
            return {
                title: titleEl.innerText,
                link: linkEl.href,
                snippet: el.querySelector('p')?.innerText || '',
                cite: new URL(linkEl.href).hostname,
                favicon: `https://www.google.com/s2/favicons?sz=64&domain_url=${new URL(linkEl.href).hostname}`,
                thumbnail,
                date
            };
        }).filter(Boolean);
    }

    function parseGoogleImages(doc) {
        return Array.from(doc.querySelectorAll('div[data-src]')).map(el => ({
            title: el.querySelector('img')?.alt || '',
            link: el.closest('a')?.href || '',
            img: el.dataset.src,
            category: 'images',
            thumbnail: el.dataset.src
        })).filter(i => i.img);
    }

    // --- Autocomplete ---
    async function fetchAutocomplete(query, forResults = false) {
        if (query.length < 2) {
            if (!forResults) suggestionsBox.style.display = 'none';
            return;
        }
        try {
            const url = `https://suggestqueries.google.com/complete/search?client=firefox&q=${encodeURIComponent(query)}`;
            const response = await fetch(`${PROXY_URL}${encodeURIComponent(url)}`);
            const data = await response.json();
            suggestions = JSON.parse(data.contents)[1];
            const html = suggestions.map(s => `<div class="${forResults ? 'result-suggestion' : 'suggestion-item'}" onclick="selectSuggestion('${s}')">${s}</div>`).join('');
            if (forResults) {
                resultsSuggestions.innerHTML = html;
            } else {
                suggestionsBox.innerHTML = html;
                suggestionsBox.style.display = 'block';
            }
        } catch (error) {
            console.error('Autocomplete fetch failed:', error);
        }
    }

    window.selectSuggestion = function(sugg) {
        mainSearchInput.value = sugg;
        resultsSearchInput.value = sugg;
        handleSearch();
    }

    // --- UI, Settings & Event Handlers ---
    function showResultsPage() {
        mainPage.style.display = 'none';
        resultsPage.style.display = 'block';
    }

    function showMainPage() {
        resultsPage.style.display = 'none';
        mainPage.style.display = 'flex';
        window.removeEventListener('scroll', infiniteScroll);
    }

    mainSearchForm.addEventListener('submit', handleSearch);
    resultsSearchForm.addEventListener('submit', handleSearch);
    themeToggle.addEventListener('change', () => {
        settings.darkMode = themeToggle.checked;
        saveSettings();
        loadSettings();
    });
    sourceToggle.addEventListener('change', () => {
        settings.showSource = sourceToggle.checked;
        saveSettings();
    });
    tabsContainer.addEventListener('click', handleTabClick);
    headerLogo.addEventListener('click', showMainPage);
    menuHomeBtn.addEventListener('click', showMainPage);
    menuButton.addEventListener('click', () => sideMenu.classList.toggle('open'));
    mainSearchInput.addEventListener('input', e => {
        clearTimeout(suggestionDebounce);
        suggestionDebounce = setTimeout(() => fetchAutocomplete(e.target.value), 250);
    });
    suggestionsBox.addEventListener('click', e => {
        if (e.target.matches('.suggestion-item')) {
            mainSearchInput.value = e.target.innerText;
            handleSearch();
        }
    });
    resultsSuggestions.addEventListener('click', e => {
        if (e.target.matches('.result-suggestion')) {
            selectSuggestion(e.target.innerText);
        }
    });
    document.addEventListener('click', e => {
        if (!sideMenu.contains(e.target) && !menuButton.contains(e.target)) sideMenu.classList.remove('open');
        if (!mainSearchInput.contains(e.target) && !suggestionsBox.contains(e.target)) suggestionsBox.style.display = 'none';
    });
    window.onscroll = () => {
        const show = document.documentElement.scrollTop > 100;
        backToTopBtn.style.display = show ? 'block' : 'none';
        backToHomeBtn.style.display = show ? 'block' : 'none';
    };
    backToTopBtn.onclick = () => window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
    backToHomeBtn.onclick = showMainPage;

    // --- Voice Search ---
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.lang = 'hi-IN';
        const startVoiceSearch = (input) => {
            recognition.start();
            input.placeholder = "बोलना शुरू करें...";
            recognition.onresult = (e) => {
                input.value = e.results[0][0].transcript;
                input.form.requestSubmit();
            };
            recognition.onerror = () => {
                input.placeholder = "क्षमा करें, मैं सुन नहीं पाया।";
            };
        };
        voiceSearchBtn.onclick = () => startVoiceSearch(mainSearchInput);
        resultsVoiceBtn.onclick = () => startVoiceSearch(resultsSearchInput);
    } else {
        voiceSearchBtn.style.display = 'none';
        resultsVoiceBtn.style.display = 'none';
    }

    // --- Pull-to-Refresh ---
    let touchStartY = 0;
    document.addEventListener('touchstart', e => touchStartY = e.touches[0].clientY);
    document.addEventListener('touchmove', e => {
        if (e.touches[0].clientY - touchStartY > 100 && window.scrollY === 0) {
            location.reload();
        }
    });

    // --- Initial Load ---
    loadSettings();
});
