document.addEventListener('DOMContentLoaded', () => {
    const mainPage = document.getElementById('main-page');
    const resultsPage = document.getElementById('results-page');
    const mainSearchForm = document.getElementById('main-search-form');
    const resultsSearchForm = document.getElementById('results-search-form');
    const mainSearchInput = document.getElementById('main-search-input');
    const resultsSearchInput = document.getElementById('results-search-input');
    const tabsContainer = document.getElementById('tabs-container');
    const instantAnswerContainer = document.getElementById('instant-answer-container');
    const resultsContainer = document.getElementById('results-container');
    const suggestionsBox = document.getElementById('autocomplete-suggestions');
    const resultsSuggestions = document.getElementById('results-suggestions');
    const themeToggle = document.getElementById('theme-checkbox');
    const sourceToggle = document.getElementById('source-toggle');
    const privacyToggle = document.getElementById('privacy-toggle');
    const menuButton = document.getElementById('menu-button');
    const sideMenu = document.getElementById('side-menu');
    const headerLogo = document.getElementById('header-logo-home');
    const menuHomeBtn = document.getElementById('menu-home-btn');
    const backToTopBtn = document.getElementById('back-to-top');
    const backToHomeBtn = document.getElementById('back-to-home');
    const voiceSearchBtn = document.getElementById('voice-search-btn');
    const resultsVoiceBtn = document.getElementById('results-voice-btn');
    const aiModeBtn = document.getElementById('ai-mode-btn');
    const resultsAiModeBtn = document.getElementById('results-ai-mode-btn');
    const aiChat = document.getElementById('ai-chat');
    const aiInput = document.getElementById('ai-input');
    const aiMessages = document.getElementById('ai-messages');
    const aiSend = document.getElementById('ai-send');
    const uploadBtn = document.getElementById('upload-btn');
    const resultsUploadBtn = document.getElementById('results-upload-btn');
    const imageUpload = document.getElementById('image-upload');
    const dateFilter = document.getElementById('date-filter');
    const locationFilter = document.getElementById('location-filter');
    const loadMore = document.getElementById('load-more');

    let state = { currentQuery: '', currentPage: 1, resultsPerPage: 10, isAiMode: false };
    let settings = { darkMode: false, showSource: false, privacy: true };
    let aiConversation = [];
    let allResults = [];
    let suggestionDebounce;

    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js').then(() => console.log('SW registered'));
    }

    function loadSettings() {
        const saved = localStorage.getItem('mistaFySettings');
        if (saved) {
            settings = JSON.parse(saved);
            document.body.classList.toggle('dark-mode', settings.darkMode);
            themeToggle.checked = settings.darkMode;
            sourceToggle.checked = settings.showSource;
            privacyToggle.checked = settings.privacy;
        }
    }

    function saveSettings() {
        localStorage.setItem('mistaFySettings', JSON.stringify(settings));
    }

    function toggleAiMode() {
        state.isAiMode = !state.isAiMode;
        aiChat.style.display = state.isAiMode ? 'block' : 'none';
        [aiModeBtn, resultsAiModeBtn].forEach(btn => {
            const svg = btn.querySelector('svg');
            svg.innerHTML = state.isAiMode ? '<path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm0 1a6 6 0 1 1 0 12A6 6 0 0 1 8 2zm0 2a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm0 4a3 3 0 1 0 0 6 3 3 0 0 0 0-6z"/>' : '<path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zM1.5 8a6.5 6.5 0 1 1 13 0 6.5 6.5 0 0 1-13 0z"/><path d="M6.5 7.75v1.5a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0zm4 0v1.5a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0z"/>';
        });
        if (state.isAiMode) aiMessages.innerHTML = '<div class="ai-msg">AI मोड चालू: प्रश्न पूछें!</div>';
    }
    [aiModeBtn, resultsAiModeBtn].forEach(btn => btn.onclick = toggleAiMode);

    aiSend.onclick = async () => {
        const msg = aiInput.value.trim();
        if (!msg) return;
        aiMessages.innerHTML += `<div class="user-msg">${msg}</div>`;
        aiInput.value = '';
        aiMessages.innerHTML += '<div class="ai-loading">AI सोच रहा है...</div>';
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: { 'Authorization': 'Bearer YOUR_OPENAI_KEY', 'Content-Type': 'application/json' },
            body: JSON.stringify({ model: 'gpt-4o-mini', messages: [...aiConversation, { role: 'user', content: msg }] })
        });
        const data = await response.json();
        const aiReply = data.choices[0].message.content;
        aiMessages.innerHTML = aiMessages.innerHTML.replace('<div class="ai-loading">AI सोच रहा है...</div>', `<div class="ai-msg">${aiReply}</div>`);
        aiConversation.push({ role: 'user', content: msg }, { role: 'assistant', content: aiReply });
    };

    [uploadBtn, resultsUploadBtn].forEach(btn => btn.onclick = () => imageUpload.click());
    imageUpload.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
            state.currentQuery = URL.createObjectURL(file);
            handleMultimodal(state.currentQuery, 'image');
        }
    };

    function applyFilters() {
        state.currentQuery += ` ${dateFilter.value ? `after:${dateFilter.value}` : ''} ${locationFilter.value ? `near:${locationFilter.value}` : ''}`;
    }
    [dateFilter, locationFilter].forEach(el => el.onchange = applyFilters);

    async function handleSearch(event) {
        if (event) event.preventDefault();
        const input = mainPage.style.display !== 'none' ? mainSearchInput : resultsSearchInput;
        state.currentQuery = input.value.trim();
        if (!state.currentQuery) return;

        applyFilters();
        showResultsPage();
        [mainSearchInput.value, resultsSearchInput.value] = [state.currentQuery, state.currentQuery];

        instantAnswerContainer.innerHTML = '';
        resultsContainer.innerHTML = '';
        tabsContainer.innerHTML = '';
        resultsSuggestions.innerHTML = '';
        loadMore.innerHTML = '';
        state.currentPage = 1;

        const isInstant = await handleInstantAnswers(state.currentQuery);
        if (!isInstant) {
            await fetchAndRenderFullResults();
            await fetchAutocomplete(state.currentQuery, true);
        }
    }

    async function handleInstantAnswers(query) {
        const q = query.toLowerCase();
        if (/^\d+\s*\*\s*\d+$/.test(q)) {
            const [a, b] = q.split('*').map(Number);
            renderInstantAnswer('कैलकुलेटर', `<h2>${a * b}</h2>`);
            return true;
        }
        if (/(weather|mausam)\s(in|mein)\s(.+)/.test(q)) {
            const city = q.match(/(weather|mausam)\s(in|mein)\s(.+)/)[3];
            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_WEATHER_API_KEY&units=metric&lang=hi`);
            const data = await response.json();
            renderInstantAnswer('मौसम', `<h2>${data.main.temp}°C</h2><p>${data.weather[0].description}</p>`);
            return true;
        }
        if (/(\d+)\s(\w+)\sto\s(\w+)/.test(q)) {
            const [, amount, from, to] = q.match(/(\d+)\s(\w+)\sto\s(\w+)/);
            const response = await fetch(`https://api.exchangerate-api.com/v4/latest/${from}`);
            const data = await response.json();
            const rate = data.rates[to];
            renderInstantAnswer('मुद्रा', `<h2>${amount} ${from} = ${(amount * rate).toFixed(2)} ${to}</h2>`);
            return true;
        }
        if (/(cricket score|match result)\s(.+)/.test(q)) {
            const match = q.match(/(cricket score|match result)\s(.+)/)[2];
            const response = await fetch(`https://api.cricapi.com/v1/currentMatches?apikey=YOUR_CRICKET_API_KEY`);
            const data = await response.json();
            const score = data.data.find(game => game.match.includes(match))?.status || 'कोई लाइव मैच नहीं';
            renderInstantAnswer('क्रिकेट', `<h2>${score}</h2>`);
            return true;
        }
        return false;
    }

    function renderInstantAnswer(title, content) {
        instantAnswerContainer.innerHTML = `<div class="widget-card">${content}</div>`;
    }

    async function fetchAndRenderFullResults(forJson = false) {
        resultsContainer.innerHTML = '<div class="loader">खोज रहे हैं...</div>';
        const fetchPromises = ENGINES.map(engine => fetchAndParse(engine, state.currentQuery));
        const results = (await Promise.allSettled(fetchPromises)).flatMap(res => res.status === 'fulfilled' ? res.value : []);
        allResults = results;
        if (allResults.length === 0) {
            resultsContainer.innerHTML = '<div class="result-item">कोई परिणाम नहीं।</div>';
            return [];
        }
        categorizeAndBuildTabs(allResults);
        return forJson ? allResults : [];
    }

    function categorizeAndBuildTabs(results) {
        const tabs = { all: [], images: [] };
        results.forEach(item => tabs[item.category || 'all'].push(item));
        let tabsHtml = '<button class="tab-button active" data-tab="all">सभी</button>';
        if (tabs.images.length) tabsHtml += '<button class="tab-button" data-tab="images">चित्र</button>';
        tabsContainer.innerHTML = tabsHtml;
        renderResults(tabs.all, 'all');
    }

    function handleTabClick(e) {
        if (e.target.classList.contains('tab-button')) {
            tabsContainer.querySelector('.active').classList.remove('active');
            e.target.classList.add('active');
            const tab = e.target.dataset.tab;
            renderResults(tabs[tab] || allResults, tab);
        }
    }

    function renderResults(results, type) {
        resultsContainer.innerHTML = results.slice(0, state.resultsPerPage).map(item => `
            <div class="result-item">
                ${item.thumbnail ? `<img src="${item.thumbnail}" alt="Thumbnail">` : ''}
                <h3><a href="${item.link}" target="_blank">${item.title}</a></h3>
                <p>${item.snippet}</p>
                ${settings.showSource && item.source ? `<small>स्रोत: ${item.source}</small>` : ''}
            </div>
        `).join('');
        if (results.length > state.resultsPerPage) {
            loadMore.innerHTML = '<button class="load-more-btn" onclick="loadMore()">और लोड करें</button>';
        }
    }

    window.loadMore = () => {
        const start = state.currentPage * state.resultsPerPage;
        const end = start + state.resultsPerPage;
        const more = allResults.slice(start, end);
        if (more.length) {
            resultsContainer.innerHTML += more.map(item => `
                <div class="result-item">
                    ${item.thumbnail ? `<img src="${item.thumbnail}" alt="Thumbnail">` : ''}
                    <h3><a href="${item.link}" target="_blank">${item.title}</a></h3>
                    <p>${item.snippet}</p>
                    ${settings.showSource && item.source ? `<small>स्रोत: ${item.source}</small>` : ''}
                </div>
            `).join('');
            state.currentPage++;
        } else {
            loadMore.innerHTML = '';
        }
    };

    async function fetchAndParse(engine, query) {
        const url = `${engine.baseUrl}${encodeURIComponent(query)}`;
        const doc = await fetchViaProxy(url);
        return engine.parser(doc);
    }

    async function fetchViaProxy(url) {
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
        const data = await response.json();
        return new DOMParser().parseFromString(data.contents, 'text/html');
    }

    function parseGoogle(doc) {
        return Array.from(doc.querySelectorAll('div.g')).map(el => {
            const link = el.querySelector('a');
            const title = el.querySelector('h3');
            if (!link || !title) return null;
            const thumbnail = el.querySelector('img')?.src || '';
            return { title: title.textContent, link: link.href, snippet: el.querySelector('span')?.textContent || '', thumbnail };
        }).filter(Boolean);
    }

    function parseBing(doc) {
        return Array.from(doc.querySelectorAll('li.b_algo')).map(el => {
            const link = el.querySelector('a');
            const title = el.querySelector('h2');
            if (!link || !title) return null;
            const thumbnail = el.querySelector('img')?.src || '';
            return { title: title.textContent, link: link.href, snippet: el.querySelector('p')?.textContent || '', thumbnail };
        }).filter(Boolean);
    }

    function parseGoogleImages(doc) {
        return Array.from(doc.querySelectorAll('div[data-src]')).map(el => ({
            title: el.querySelector('img')?.alt || '',
            link: el.closest('a')?.href || '',
            thumbnail: el.dataset.src,
            category: 'images'
        })).filter(i => i.thumbnail);
    }

    async function fetchAutocomplete(query, forResults = false) {
        if (query.length < 2) {
            suggestionsBox.style.display = 'none';
            return;
        }
        const url = `https://suggestqueries.google.com/complete/search?client=firefox&q=${encodeURIComponent(query)}`;
        const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
        const data = await response.json();
        const suggestions = JSON.parse(data.contents)[1];
        const html = suggestions.map(s => `<div class="suggestion-item" onclick="selectSuggestion('${s}')">${s}</div>`).join('');
        if (forResults) resultsSuggestions.innerHTML = html;
        else {
            suggestionsBox.innerHTML = html;
            suggestionsBox.style.display = 'block';
        }
    }

    window.selectSuggestion = (sugg) => {
        mainSearchInput.value = sugg;
        resultsSearchInput.value = sugg;
        handleSearch();
    };

    async function handleMultimodal(query, type = 'image') {
        if (type === 'image') {
            const imageResults = await fetchAndParse(ENGINES.find(e => e.name === 'GoogleImages'), query);
            renderResults(imageResults, 'images');
        }
    }

    function showResultsPage() {
        mainPage.style.display = 'none';
        resultsPage.style.display = 'block';
    }

    function showMainPage() {
        resultsPage.style.display = 'none';
        mainPage.style.display = 'flex';
        aiChat.style.display = 'none';
        state.isAiMode = false;
    }

    // Event Listeners
    mainSearchForm.addEventListener('submit', handleSearch);
    resultsSearchForm.addEventListener('submit', handleSearch);
    themeToggle.addEventListener('change', () => {
        settings.darkMode = themeToggle.checked;
        saveSettings();
        loadSettings();
    });
    sourceToggle.addEventListener('change', () => {
        settings.showSource = sourceToggle.checked;
        saveSettings();
    });
    privacyToggle.addEventListener('change', () => {
        settings.privacy = privacyToggle.checked;
        saveSettings();
    });
    tabsContainer.addEventListener('click', handleTabClick);
    headerLogo.addEventListener('click', showMainPage);
    menuHomeBtn.addEventListener('click', showMainPage);
    menuButton.addEventListener('click', () => sideMenu.classList.toggle('open'));
    mainSearchInput.addEventListener('input', e => {
        clearTimeout(suggestionDebounce);
        suggestionDebounce = setTimeout(() => fetchAutocomplete(e.target.value), 300);
    });
    document.addEventListener('click', e => {
        if (!sideMenu.contains(e.target) && !menuButton.contains(e.target)) sideMenu.classList.remove('open');
        if (!mainSearchInput.contains(e.target)) suggestionsBox.style.display = 'none';
    });
    window.onscroll = () => [backToTopBtn, backToHomeBtn].forEach(btn => btn.style.display = (document.documentElement.scrollTop > 100) ? 'block' : 'none');
    backToTopBtn.onclick = () => window.scrollTo({ top: 0, behavior: 'smooth' });
    backToHomeBtn.onclick = showMainPage;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.lang = 'hi-IN';
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => btn.onclick = () => {
            const input = btn.id === 'voice-search-btn' ? mainSearchInput : resultsSearchInput;
            recognition.start();
            input.placeholder = "बोलें...";
            recognition.onresult = e => {
                input.value = e.results[0][0].transcript;
                input.form.requestSubmit();
            };
            recognition.onerror = () => input.placeholder = "सुन नहीं पाया।";
        });
    } else {
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => btn.style.display = 'none');
    }

    // API Handler
    if (window.location.pathname === '/api') {
        const params = new URLSearchParams(window.location.search);
        const q = params.get('q');
        if (q) {
            state.currentQuery = q;
            fetchAndRenderFullResults(true).then(results => {
                const response = { query: q, results, timestamp: new Date().toISOString() };
                if (allResults.length === 0) response.error = 'No results';
                document.body.innerHTML = JSON.stringify(response);
            });
        }
        return;
    }

    loadSettings();
});

// Service Worker (sw.js)
self.addEventListener('fetch', event => {
    event.respondWith(caches.match(event.request).then(response => response || fetch(event.request)));
});
