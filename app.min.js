document.addEventListener('DOMContentLoaded', () => {
    const mainPage = document.getElementById('main-page');
    const resultsPage = document.getElementById('results-page');
    const mainSearchForm = document.getElementById('main-search-form');
    const resultsSearchForm = document.getElementById('results-search-form');
    const mainSearchInput = document.getElementById('main-search-input');
    const resultsSearchInput = document.getElementById('results-search-input');
    const tabsContainer = document.getElementById('tabs-container');
    const instantAnswerContainer = document.getElementById('instant-answer-container');
    const resultsContainer = document.getElementById('results-container');
    const autocompleteSuggestions = document.getElementById('autocomplete-suggestions');
    const resultsSuggestions = document.getElementById('results-suggestions');
    const themeCheckbox = document.getElementById('theme-checkbox');
    const sourceToggle = document.getElementById('source-toggle');
    const privacyToggle = document.getElementById('privacy-toggle');
    const menuButton = document.getElementById('menu-button');
    const sideMenu = document.getElementById('side-menu');
    const headerLogoHome = document.getElementById('header-logo-home');
    const menuHomeBtn = document.getElementById('menu-home-btn');
    const backToTop = document.getElementById('back-to-top');
    const backToHome = document.getElementById('back-to-home');
    const voiceSearchBtn = document.getElementById('voice-search-btn');
    const resultsVoiceBtn = document.getElementById('results-voice-btn');
    const aiModeBtn = document.getElementById('ai-mode-btn');
    const resultsAiModeBtn = document.getElementById('results-ai-mode-btn');
    const aiChat = document.getElementById('ai-chat');
    const aiInput = document.getElementById('ai-input');
    const aiMessages = document.getElementById('ai-messages');
    const aiSend = document.getElementById('ai-send');
    const uploadBtn = document.getElementById('upload-btn');
    const resultsUploadBtn = document.getElementById('results-upload-btn');
    const imageUpload = document.getElementById('image-upload');
    const dateFilter = document.getElementById('date-filter');
    const locationFilter = document.getElementById('location-filter');

    let state = { currentQuery: '', currentPage: 1, resultsPerPage: 20, isAiMode: false };
    let settings = { darkMode: false, showSource: false, privacy: true };
    let chatHistory = [];
    let results = [];
    let timeoutId;

    const searchEngines = [
        { name: 'Google', baseUrl: 'https://www.google.com/search?q=', parser: parseGoogle },
        { name: 'Bing', baseUrl: 'https://www.bing.com/search?q=', parser: parseBing },
        { name: 'DuckDuckGo', baseUrl: 'https://duckduckgo.com/?q=', parser: parseGoogle },
        { name: 'Yahoo', baseUrl: 'https://search.yahoo.com/search?p=', parser: parseBing },
        { name: 'Yandex', baseUrl: 'https://yandex.com/search/?text=', parser: parseGoogle },
        { name: 'Ecosia', baseUrl: 'https://www.ecosia.org/search?q=', parser: parseGoogle },
        { name: 'Brave', baseUrl: 'https://search.brave.com/search?q=', parser: parseBing },
        { name: 'Startpage', baseUrl: 'https://www.startpage.com/sp/search?q=', parser: parseGoogle },
        { name: 'Mojeek', baseUrl: 'https://www.mojeek.com/search?q=', parser: parseBing },
        { name: 'Qwant', baseUrl: 'https://www.qwant.com/?q=', parser: parseGoogle },
        { name: 'Ask', baseUrl: 'https://www.ask.com/web?q=', parser: parseBing },
        { name: 'Searx', baseUrl: 'https://searx.org/search?q=', parser: parseGoogle },
        { name: 'MetaGer', baseUrl: 'https://metager.org/meta/meta.ger3?eingabe=', parser: parseBing }
    ];

    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js').then(() => console.log('Service Worker registered')).catch(err => console.error('SW registration failed:', err));
    }

    function loadSettings() {
        const savedSettings = localStorage.getItem('mistaFySettings');
        if (savedSettings) {
            settings = JSON.parse(savedSettings);
            document.body.classList.toggle('dark-mode', settings.darkMode);
            themeCheckbox.checked = settings.darkMode;
            sourceToggle.checked = settings.showSource;
            privacyToggle.checked = settings.privacy;
        }
    }

    function saveSettings() {
        localStorage.setItem('mistaFySettings', JSON.stringify(settings));
    }

    [aiModeBtn, resultsAiModeBtn].forEach(btn => {
        btn.onclick = () => {
            state.isAiMode = !state.isAiMode;
            aiChat.style.display = state.isAiMode ? 'block' : 'none';
            const svg = btn.querySelector('svg');
            svg.innerHTML = state.isAiMode
                ? '<path d="M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm0 1a6 6 0 1 1 0 12A6 6 0 0 1 8 2zm0 2a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm0 4a3 3 0 1 0 0 6 3 3 0 0 0 0-6z"/>'
                : '<path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zM1.5 8a6.5 6.5 0 1 1 13 0 6.5 6.5 0 0 1-13 0z"/><path d="M6.5 7.75v1.5a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0zm4 0v1.5a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0z"/>';
            svg.style.fill = state.isAiMode ? '#b0b0b0' : '#666';
            if (state.isAiMode) aiMessages.innerHTML = '<div class="ai-msg">AI मोड चालू: प्रश्न पूछें!</div>';
        };
    });

    aiSend.onclick = async () => {
        const query = aiInput.value.trim();
        if (!query) return;
        aiMessages.innerHTML += '<div class="user-msg">' + query + '</div>';
        aiInput.value = '';
        aiMessages.innerHTML += '<div class="ai-loading">MistaFy AI सोच रहा है...</div>';
        const summary = generateLocalSummary(chatHistory.map(msg => msg.content).concat([query]), results.all.slice(0, 5));
        aiMessages.innerHTML = aiMessages.innerHTML.replace('<div class="ai-loading">MistaFy AI सोच रहा है...</div>', '<div class="ai-msg">' + summary + '</div>');
        chatHistory.push({ role: 'user', content: query }, { role: 'assistant', content: summary });
    };

    [uploadBtn, resultsUploadBtn].forEach(btn => {
        btn.onclick = () => imageUpload.click();
    });
    imageUpload.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
            state.currentQuery = URL.createObjectURL(file);
            handleMultimodal(state.currentQuery, 'image');
        }
    };

    [dateFilter, locationFilter].forEach(filter => {
        filter.onchange = () => {
            state.currentQuery += ` ${dateFilter.value ? `after:${dateFilter.value}` : ''} ${locationFilter.value ? `near:${locationFilter.value}` : ''}`;
        };
    });

    mainSearchForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const input = e.target === mainSearchForm ? mainSearchInput : resultsSearchInput;
        state.currentQuery = input.value.trim();
        if (state.currentQuery) {
            applyFilters();
            showResultsPage();
            [mainSearchInput.value, resultsSearchInput.value] = [state.currentQuery, state.currentQuery];
            instantAnswerContainer.innerHTML = '';
            resultsContainer.innerHTML = '';
            tabsContainer.innerHTML = '';
            resultsSuggestions.innerHTML = '';
            state.currentPage = 1;
            await handleInstantAnswers(state.currentQuery) || await fetchAndRenderFullResults();
        }
    });

    resultsSearchForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const input = e.target === resultsSearchForm ? resultsSearchInput : mainSearchInput;
        state.currentQuery = input.value.trim();
        if (state.currentQuery) {
            applyFilters();
            showResultsPage();
            [mainSearchInput.value, resultsSearchInput.value] = [state.currentQuery, state.currentQuery];
            instantAnswerContainer.innerHTML = '';
            resultsContainer.innerHTML = '';
            tabsContainer.innerHTML = '';
            resultsSuggestions.innerHTML = '';
            state.currentPage = 1;
            await handleInstantAnswers(state.currentQuery) || await fetchAndRenderFullResults();
        }
    });

    themeCheckbox.addEventListener('change', () => {
        settings.darkMode = themeCheckbox.checked;
        saveSettings();
        loadSettings();
    });
    sourceToggle.addEventListener('change', () => {
        settings.showSource = sourceToggle.checked;
        saveSettings();
    });
    privacyToggle.addEventListener('change', () => {
        settings.privacy = privacyToggle.checked;
        saveSettings();
    });

    tabsContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('tab-button')) {
            const activeTab = tabsContainer.querySelector('.active');
            if (activeTab) activeTab.classList.remove('active');
            e.target.classList.add('active');
            renderResults(results[e.target.dataset.tab] || results.all, 'all');
        }
    });

    headerLogoHome.addEventListener('click', showMainPage);
    menuHomeBtn.addEventListener('click', showMainPage);
    menuButton.addEventListener('click', () => sideMenu.classList.toggle('open'));

    mainSearchInput.addEventListener('input', (e) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fetchAutocomplete(e.target.value), 200);
    });

    document.addEventListener('click', (e) => {
        if (!sideMenu.contains(e.target) && !menuButton.contains(e.target)) sideMenu.classList.remove('open');
        if (!mainSearchInput.contains(e.target) && autocompleteSuggestions.style.display === 'block') autocompleteSuggestions.style.display = 'none';
    });

    window.onscroll = () => {
        [backToTop, backToHome].forEach(btn => btn.style.display = document.documentElement.scrollTop > 50 ? 'block' : 'none');
    };
    backToTop.onclick = () => window.scrollTo({ top: 0, behavior: 'smooth' });
    backToHome.onclick = showMainPage;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => {
            btn.onclick = () => {
                const input = btn.id === 'voice-search-btn' ? mainSearchInput : resultsSearchInput;
                const recognition = new SpeechRecognition();
                recognition.lang = 'hi-IN';
                recognition.start();
                input.placeholder = 'बोलें...';
                recognition.onresult = (event) => {
                    input.value = event.results[0][0].transcript;
                    input.form.requestSubmit();
                };
                recognition.onerror = () => input.placeholder = 'सुन नहीं पाया।';
                recognition.onend = () => input.placeholder = 'खोजें: मौसम दिल्ली, क्रिकेट...';
            };
        });
    } else {
        [voiceSearchBtn, resultsVoiceBtn].forEach(btn => btn.style.display = 'none');
    }

    if (window.location.pathname === '/api') {
        const query = new URLSearchParams(window.location.search).get('q');
        if (query) {
            state.currentQuery = query;
            fetchAndRenderFullResults(true).then(data => {
                const response = { query, results: data, timestamp: new Date().toISOString() };
                if (data.length === 0) response.error = 'No results';
                document.body.innerHTML = JSON.stringify(response);
            }).catch(err => console.error('API Error:', err));
        }
    }

    function showResultsPage() {
        mainPage.style.display = 'none';
        resultsPage.style.display = 'block';
    }
    function showMainPage() {
        resultsPage.style.display = 'none';
        mainPage.style.display = 'flex';
        aiChat.style.display = 'none';
        state.isAiMode = false;
    }

    async function handleInstantAnswers(query) {
        const lcQuery = query.toLowerCase();
        if (/^\d+\s*\*\s*\d+$/.test(lcQuery)) {
            const [num1, num2] = lcQuery.split('*').map(Number);
            renderInstantAnswer('कैलकुलेटर', `<h3>${num1 * num2}</h3>`);
            return true;
        }
        if (/(weather|mausam)\s(in|mein)\s(.+)/.test(lcQuery)) {
            const city = lcQuery.match(/(weather|mausam)\s(in|mein)\s(.+)/)[3];
            renderInstantAnswer('मौसम', `<h3>${city} के लिए मौसम डेटा उपलब्ध नहीं (अभी तक स्थानीय API नहीं)</h3>`);
            return true;
        }
        if (/(\d+)\s(\w+)\sto\s(\w+)/.test(lcQuery)) {
            const [, amount, from, to] = lcQuery.match(/(\d+)\s(\w+)\sto\s(\w+)/);
            renderInstantAnswer('मुद्रा', `<h3>${amount} ${from} = स्थानीय रूपांतरण उपलब्ध नहीं (अभी तक API नहीं)</h3>`);
            return true;
        }
        if (/(cricket score|match result)\s(.+)/.test(lcQuery)) {
            const match = lcQuery.match(/(cricket score|match result)\s(.+)/)[2];
            renderInstantAnswer('क्रिकेट', `<h3>${match} का स्कोर उपलब्ध नहीं (अभी तक स्थानीय API नहीं)</h3>`);
            return true;
        }
        return false;
    }

    function renderInstantAnswer(title, content) {
        instantAnswerContainer.innerHTML = '<div class="widget-card">' + content + '</div>';
    }

    async function fetchAndRenderFullResults(isApi = false) {
        resultsContainer.innerHTML = '<div class="loader">खोज रहे हैं...</div>';
        try {
            const fetchPromises = searchEngines.map(engine => fetchAndParse(engine, state.currentQuery));
            const settledResults = await Promise.allSettled(fetchPromises);
            const allResults = settledResults.flatMap(result => result.status === 'fulfilled' ? result.value : []);
            const uniqueResults = Array.from(new Map(allResults.map(result => [result.link, result])).values()).slice(0, 50);
            results = uniqueResults.reduce((acc, result) => {
                acc[result.category || 'all'].push(result);
                return acc;
            }, { all: [], images: [] });
            if (results.all.length === 0) {
                resultsContainer.innerHTML = '<div class="result-item">कोई परिणाम नहीं।</div>';
                results.all = [];
            } else {
                const mistaFySummary = generateMistaFySummary(results.all.map(r => ({ title: r.title, link: r.link, snippet: r.snippet })).slice(0, 5));
                instantAnswerContainer.innerHTML = mistaFySummary ? `<div class="widget-card"><h3>MistaFy AI Summary</h3>${mistaFySummary}</div>` : '';
                tabsContainer.innerHTML = '<button class="tab-button active" data-tab="all">सभी</button>' + (results.images.length ? '<button class="tab-button" data-tab="images">चित्र</button>' : '');
                renderResults(results.all, 'all');
            }
            return isApi ? results.all : [];
        } catch (error) {
            resultsContainer.innerHTML = '<div class="result-item">खोज में त्रुटि।</div>';
            console.error('Fetch Error:', error);
            return [];
        }
    }

    function generateMistaFySummary(results) {
        if (!results.length) return '';
        const summary = `
            <p>${results[0].title} एक महत्वपूर्ण विषय है। ${results[0].snippet}। ${results[1] ? results[1].snippet : ''}। ${results[2] ? results[2].snippet : ''}। यह जानकारी ${results.length} स्रोतों से संकलित की गई है।</p>
            <h4>संदर्भ:</h4>
            <ul>
                ${results.map((r, i) => `<li>[${i + 1}] <a href="${r.link}" target="_blank">${r.link}</a></li>`).join('')}
            </ul>
        `;
        return summary.length > 100 ? summary.substring(0, 150) + '...' : summary;
    }

    function renderResults(data, category) {
        resultsContainer.innerHTML = data.slice(0, state.currentPage * state.resultsPerPage).map(result => `
            <div class="result-item">
                <a href="${result.link}" target="_blank">${result.title}</a>
                <p>${result.snippet}</p>
                ${settings.showSource && result.source ? '<small>स्रोत: ' + result.source + '</small>' : ''}
            </div>
        `).join('');
    }

    async function fetchAndParse(engine, query) {
        const url = `${engine.baseUrl}${encodeURIComponent(query)}`;
        const response = await fetchViaProxy(url);
        return engine.parser(response);
    }

    async function fetchViaProxy(url) {
        try {
            const proxyResponse = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
            const data = await proxyResponse.json();
            return new DOMParser().parseFromString(data.contents, 'text/html');
        } catch (error) {
            console.error('Proxy Error:', error);
            return null;
        }
    }

    function parseGoogle(doc) {
        return Array.from(doc.querySelectorAll('div.g, article.result')).map(item => {
            const link = item.querySelector('a');
            const title = item.querySelector('h3, h2');
            if (!link || !title) return null;
            const snippet = item.querySelector('span, p')?.textContent || '';
            const thumbnail = item.querySelector('img')?.src || '';
            return { title: title.textContent, link: link.href, snippet, thumbnail, source: link.hostname };
        }).filter(Boolean);
    }

    function parseBing(doc) {
        return Array.from(doc.querySelectorAll('li.b_algo, div.compilation')).map(item => {
            const link = item.querySelector('a');
            const title = item.querySelector('h2');
            if (!link || !title) return null;
            const snippet = item.querySelector('p')?.textContent || '';
            const thumbnail = item.querySelector('img')?.src || '';
            return { title: title.textContent, link: link.href, snippet, thumbnail, source: link.hostname };
        }).filter(Boolean);
    }

    async function fetchAutocomplete(query, isResults = false) {
        if (query.length < 2) {
            autocompleteSuggestions.style.display = 'none';
            resultsSuggestions.innerHTML = '';
            return;
        }
        try {
            const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent('https://suggestqueries.google.com/complete/search?client=firefox&q=' + encodeURIComponent(query))}`);
            const data = await response.json();
            const suggestions = JSON.parse(data.contents)[1];
            const html = suggestions.map(suggestion => `<div class="suggestion-item" onclick="selectSuggestion('${suggestion}')">${suggestion}</div>`).join('');
            if (isResults) resultsSuggestions.innerHTML = html;
            else {
                autocompleteSuggestions.innerHTML = html;
                autocompleteSuggestions.style.display = 'block';
            }
        } catch (error) {
            console.error('Autocomplete Error:', error);
            if (!isResults) autocompleteSuggestions.style.display = 'none';
            else resultsSuggestions.innerHTML = '';
        }
    }
    window.selectSuggestion = (suggestion) => {
        mainSearchInput.value = suggestion;
        resultsSearchInput.value = suggestion;
        handleSearch(new Event('submit'));
    };

    async function handleMultimodal(query, type = 'image') {
        if (type === 'image') {
            const data = await fetchAndParse(searchEngines.find(engine => engine.name === 'Google'), query);
            renderResults(data, 'images');
        }
    }

    window.onscroll = () => {
        if (document.documentElement.scrollTop + window.innerHeight >= document.documentElement.scrollHeight - 100 && state.currentPage * results.all.length < 100) {
            fetchMoreResults();
        }
    };

    async function fetchMoreResults() {
        const start = state.currentPage * state.resultsPerPage;
        const end = start + state.resultsPerPage;
        if (end <= results.all.length) {
            const newResults = results.all.slice(start, end).map(result => `
                <div class="result-item">
                    <a href="${result.link}" target="_blank">${result.title}</a>
                    <p>${result.snippet}</p>
                    ${settings.showSource && result.source ? '<small>स्रोत: ' + result.source + '</small>' : ''}
                </div>
            `).join('');
            resultsContainer.innerHTML += newResults;
            state.currentPage++;
        }
    }

    function applyFilters() {
        state.currentQuery += ` ${dateFilter.value ? `after:${dateFilter.value}` : ''} ${locationFilter.value ? `near:${locationFilter.value}` : ''}`;
    }

    loadSettings();
});

self.addEventListener('fetch', (event) => {
    event.respondWith(caches.match(event.request).then(response => response || fetch(event.request)));
});
